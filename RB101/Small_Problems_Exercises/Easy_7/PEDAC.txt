P- 
  input: a single integer.
  output: a single integer that is 2X the argument UNLESS..
            ... unless the OG argument is a double number. In this case, return self
  
  explicit: Check to see if number is double, if NOT, multiply by 2
            - if it is, return self
  implicit: dont account for negatives

E- 


D-
  we'll be starting and ending with a single integer. 
  - however, we're gonna need to break up the integers in order to compare the first
    half to second half. We're gonna need to send to array for this. 
  - after we organize the individual elements into an array, we can convert back to 
    int before we return

A- 
  # first step will be to determine the integer digit length
    - we'll have to convert to strings and then check #length
    - since the int MUST be even length, we'll use conditional flow to break out between
      the evens and odds
      => if the integer is an ODD length, we simply multiply and return
      => if the integer is EVEN, we'll send to an abstracted method to determine
          if a double is present.
          # if double present (true) >>> we return the int as is
          # else
                double present (false) >>> we 2X the int and then return

C